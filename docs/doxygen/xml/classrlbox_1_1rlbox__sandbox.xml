<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classrlbox_1_1rlbox__sandbox" kind="class" language="C++" prot="public">
    <compoundname>rlbox::rlbox_sandbox</compoundname>
    <basecompoundref prot="protected" virt="non-virtual">T_Sbx</basecompoundref>
    <includes refid="rlbox__sandbox_8hpp" local="no">rlbox_sandbox.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T_Sbx</declname>
        <defname>T_Sbx</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="classrlbox_1_1rlbox__sandbox_1a815c2a8b5adaf0944fd995e7c9cfc72c" prot="private" static="no">
        <name>Sandbox_Status</name>
        <enumvalue id="classrlbox_1_1rlbox__sandbox_1a815c2a8b5adaf0944fd995e7c9cfc72ca2187e848d98cc04d522fc140d2d0d4a0" prot="private">
          <name>NOT_CREATED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrlbox_1_1rlbox__sandbox_1a815c2a8b5adaf0944fd995e7c9cfc72ca86bf8c89d85949f8f45cde2f73fce113" prot="private">
          <name>INITIALIZING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrlbox_1_1rlbox__sandbox_1a815c2a8b5adaf0944fd995e7c9cfc72ca98690bf632c29c17c9e4c5a64069903c" prot="private">
          <name>CREATED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrlbox_1_1rlbox__sandbox_1a815c2a8b5adaf0944fd995e7c9cfc72ca60a404d7387c1de8c46e179446aa6536" prot="private">
          <name>CLEANING_UP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="62" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="61" bodyend="67"/>
      </memberdef>
      <memberdef kind="typedef" id="classrlbox_1_1rlbox__sandbox_1a24201ea4d4fa6923d41cc3916466095e" prot="private" static="no">
        <type>decltype(::rlbox::convert_fn_ptr_to_sandbox_equivalent_detail::helper&lt; T_Sbx &gt;(std::declval&lt; T &gt;()))</type>
        <definition>using rlbox::rlbox_sandbox&lt; T_Sbx &gt;::convert_fn_ptr_to_sandbox_equivalent_t =  decltype( ::rlbox::convert_fn_ptr_to_sandbox_equivalent_detail::helper&lt;T_Sbx&gt;( std::declval&lt;T&gt;()))</definition>
        <argsstring></argsstring>
        <name>convert_fn_ptr_to_sandbox_equivalent_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="74" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classrlbox_1_1rlbox__sandbox_1a2236c8f780e2fbb505b616a05d632298" prot="public" static="no">
        <type>detail::convert_base_types_t&lt; T, typename T_Sbx::T_ShortType, typename T_Sbx::T_IntType, typename T_Sbx::T_LongType, typename T_Sbx::T_LongLongType, typename T_Sbx::T_PointerType &gt;</type>
        <definition>using rlbox::rlbox_sandbox&lt; T_Sbx &gt;::convert_to_sandbox_equivalent_nonclass_t =  detail::convert_base_types_t&lt;T, typename T_Sbx::T_ShortType, typename T_Sbx::T_IntType, typename T_Sbx::T_LongType, typename T_Sbx::T_LongLongType, typename T_Sbx::T_PointerType&gt;</definition>
        <argsstring></argsstring>
        <name>convert_to_sandbox_equivalent_nonclass_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="251" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classrlbox_1_1rlbox__sandbox_1a09c972acd976ab264478c3abd32f8383" prot="public" static="no">
        <type>detail::rlbox_remove_wrapper_t&lt; T_Ret &gt;(detail::rlbox_remove_wrapper_t&lt; T_Args &gt;...)</type>
        <definition>using rlbox::rlbox_sandbox&lt; T_Sbx &gt;::T_Cb_no_wrap =  detail::rlbox_remove_wrapper_t&lt;T_Ret&gt;( detail::rlbox_remove_wrapper_t&lt;T_Args&gt;...)</definition>
        <argsstring></argsstring>
        <name>T_Cb_no_wrap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="553" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="554" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classrlbox_1_1rlbox__sandbox_1ab6fd863e3c6c8506a01745e7d992f916" prot="private" static="yes" mutable="no">
        <type>std::shared_timed_mutex</type>
        <definition>std::shared_timed_mutex rlbox::rlbox_sandbox&lt; T_Sbx &gt;::sandbox_list_lock</definition>
        <argsstring></argsstring>
        <name>sandbox_list_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="47" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1rlbox__sandbox_1ab052abf0169e7efc9a6cb38a3b5b9cf1" prot="private" static="yes" mutable="no">
        <type>std::vector&lt; <ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; * &gt;</type>
        <definition>std::vector&lt;rlbox_sandbox&lt;T_Sbx&gt;*&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::sandbox_list</definition>
        <argsstring></argsstring>
        <name>sandbox_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="48" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrlbox_1_1rlbox__sandbox_1af1bfe0450085d81244ecffc3e2556038" prot="private" static="no" mutable="no">
        <type>std::shared_timed_mutex</type>
        <definition>std::shared_timed_mutex rlbox::rlbox_sandbox&lt; T_Sbx &gt;::func_ptr_cache_lock</definition>
        <argsstring></argsstring>
        <name>func_ptr_cache_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="50" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1rlbox__sandbox_1a2518efbb4e7c12d050fa555f121ee165" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, void * &gt;</type>
        <definition>std::map&lt;std::string, void*&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::func_ptr_map</definition>
        <argsstring></argsstring>
        <name>func_ptr_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="51" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1rlbox__sandbox_1ae9542cd3cc19b7655958aa4332adbe60" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; Sandbox_Status &gt;</type>
        <definition>std::atomic&lt;Sandbox_Status&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::sandbox_created</definition>
        <argsstring></argsstring>
        <name>sandbox_created</name>
        <initializer>= Sandbox_Status::NOT_CREATED</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="68" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1rlbox__sandbox_1a08803ef5d6b029a8b31c34df70322f51" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex rlbox::rlbox_sandbox&lt; T_Sbx &gt;::callback_lock</definition>
        <argsstring></argsstring>
        <name>callback_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="70" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1rlbox__sandbox_1ae65aee474d232b3737e07638df545f3d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; void * &gt;</type>
        <definition>std::vector&lt;void*&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::callback_keys</definition>
        <argsstring></argsstring>
        <name>callback_keys</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="71" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a29b5ec5468651f2ac34eb5107163b93b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void rlbox::rlbox_sandbox&lt; T_Sbx &gt;::check_invoke_param_type_is_ok</definition>
        <argsstring>()</argsstring>
        <name>check_invoke_param_type_is_ok</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="79" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="79" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a9d7fe6306db467d3949862346084aeed" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto rlbox::rlbox_sandbox&lt; T_Sbx &gt;::invoke_process_param</definition>
        <argsstring>(T &amp;&amp;param)</argsstring>
        <name>invoke_process_param</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="120" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="120" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a4c4c49f996b6cc9040fb9e09a8cc4ae8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename T_Arg</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T, T_Sbx &gt;</type>
        <definition>tainted&lt;T, T_Sbx&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::sandbox_callback_intercept_convert_param</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; &amp;sandbox, const T_Arg &amp;arg)</argsstring>
        <name>sandbox_callback_intercept_convert_param</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; &amp;</type>
          <declname>sandbox</declname>
        </param>
        <param>
          <type>const T_Arg &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="145" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="145" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1abded0a7d6c2b1c5505be3d0c87817c96" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Ret</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T_Args</declname>
            <defname>T_Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rlbox::rlbox_sandbox&lt; T_Sbx &gt;::unregister_callback</definition>
        <argsstring>(void *key)</argsstring>
        <name>unregister_callback</name>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Unregister a callback function and disallow the sandbox from calling this function henceforth. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="207" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="207" bodyend="225"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1ac6a40ac359d24d397bdfa65c95e04351" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Ret</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T_Args</declname>
            <defname>T_Args</defname>
          </param>
        </templateparamlist>
        <type>detail::convert_to_sandbox_equivalent_t&lt; T_Ret, T_Sbx &gt;</type>
        <definition>static detail::convert_to_sandbox_equivalent_t&lt;T_Ret, T_Sbx&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::sandbox_callback_interceptor</definition>
        <argsstring>(detail::convert_to_sandbox_equivalent_t&lt; T_Args, T_Sbx &gt;... args)</argsstring>
        <name>sandbox_callback_interceptor</name>
        <param>
          <type>detail::convert_to_sandbox_equivalent_t&lt; T_Args, T_Sbx &gt;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="163" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="163" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a0695cfcf47345344e02d1d4ba058337d" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T_Sbx *</type>
        <definition>static T_Sbx* rlbox::rlbox_sandbox&lt; T_Sbx &gt;::find_sandbox_from_example</definition>
        <argsstring>(const void *example_sandbox_ptr)</argsstring>
        <name>find_sandbox_from_example</name>
        <param>
          <type>const void *</type>
          <declname>example_sandbox_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="227" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="227" bodyend="245"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a32de91755a582024dc43b879ef192b2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T_Sbx *</type>
        <definition>T_Sbx* rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_sandbox_impl</definition>
        <argsstring>()</argsstring>
        <name>get_sandbox_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="259" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="259" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a7b938866462f607bcc069770c1bc1ba6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T_Args</declname>
            <defname>T_Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto rlbox::rlbox_sandbox&lt; T_Sbx &gt;::create_sandbox</definition>
        <argsstring>(T_Args... args)</argsstring>
        <name>create_sandbox</name>
        <param>
          <type>T_Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Create a new sandbox. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments passed to the underlying sandbox implementation. For the null sandbox, no arguments are necessary. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="268" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="268" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1ac2be161ed2183fa8bc319232a8d74da6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::rlbox_sandbox&lt; T_Sbx &gt;::destroy_sandbox</definition>
        <argsstring>()</argsstring>
        <name>destroy_sandbox</name>
        <briefdescription>
<para>Destroy sandbox and reclaim any memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="292" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="292" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a4776bcab38dc24395657d2c437e36fc8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_unsandboxed_pointer</definition>
        <argsstring>(convert_to_sandbox_equivalent_nonclass_t&lt; T &gt; p) const</argsstring>
        <name>get_unsandboxed_pointer</name>
        <param>
          <type>convert_to_sandbox_equivalent_nonclass_t&lt; T &gt;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="317" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="317" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1aaef51e55536f08aa4c642f21d0de8008" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>convert_to_sandbox_equivalent_nonclass_t&lt; T &gt;</type>
        <definition>convert_to_sandbox_equivalent_nonclass_t&lt;T&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_sandboxed_pointer</definition>
        <argsstring>(const void *p) const</argsstring>
        <name>get_sandboxed_pointer</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="329" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="329" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1ab6ecbc8d0d69a3305912fe92882ef6b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T *, T_Sbx &gt;</type>
        <definition>tainted&lt;T*, T_Sbx&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::malloc_in_sandbox</definition>
        <argsstring>()</argsstring>
        <name>malloc_in_sandbox</name>
        <briefdescription>
<para>Allocate a new pointer that is accessible to both the application and sandbox. The pointer is allocated in sandbox memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the pointer you want to create. If T=int, this would return a pointer to an int.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tainted&lt;T*, T_Sbx&gt; Tainted pointer accessible to the application and sandbox. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="377" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="377" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a967ee4efa3c49a4493eaeda65b338e70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T *, T_Sbx &gt;</type>
        <definition>tainted&lt;T*, T_Sbx&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::malloc_in_sandbox</definition>
        <argsstring>(uint32_t count)</argsstring>
        <name>malloc_in_sandbox</name>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Allocate an array that is accessible to both the application and sandbox. The pointer is allocated in sandbox memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the array elements you want to create. If T=int, this would return a pointer to an array of ints.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of array elements to allocate.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tainted&lt;T*, T_Sbx&gt; Tainted pointer accessible to the application and sandbox. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="396" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="396" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a775b1828f996dc8f14f24a296096e0e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rlbox::rlbox_sandbox&lt; T_Sbx &gt;::free_in_sandbox</definition>
        <argsstring>(tainted&lt; T *, T_Sbx &gt; ptr)</argsstring>
        <name>free_in_sandbox</name>
        <param>
          <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T *, T_Sbx &gt;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Free the memory referenced by the tainted pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sandbox memory to free. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="423" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="423" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a55e48f0300c16d36ea7ed5a7e4750f64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rlbox::rlbox_sandbox&lt; T_Sbx &gt;::is_pointer_in_sandbox_memory</definition>
        <argsstring>(const void *p)</argsstring>
        <name>is_pointer_in_sandbox_memory</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Check if the pointer points to this sandbox&apos;s memory. For the null-sandbox, this always returns true. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="447" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="447" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1afc6c3f229b2807517c54cc120dfda941" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rlbox::rlbox_sandbox&lt; T_Sbx &gt;::is_pointer_in_app_memory</definition>
        <argsstring>(const void *p)</argsstring>
        <name>is_pointer_in_app_memory</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Check if the pointer points to application memory. For the null-sandbox, this always returns true. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="456" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="456" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a9bfda00c80c73e70ddbc3f2419066cb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_total_memory</definition>
        <argsstring>()</argsstring>
        <name>get_total_memory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="461" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="461" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1af682f225ef74ad07cfa5c25e7c8ed42c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_memory_location</definition>
        <argsstring>()</argsstring>
        <name>get_memory_location</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="463" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="463" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a38b2f18b1db0dbd789477a93d0dc40eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* rlbox::rlbox_sandbox&lt; T_Sbx &gt;::lookup_symbol</definition>
        <argsstring>(const char *func_name)</argsstring>
        <name>lookup_symbol</name>
        <param>
          <type>const char *</type>
          <declname>func_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="468" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="468" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a9f9e13680f09205f25a520fc04ef3f9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T_Args</declname>
            <defname>T_Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto rlbox::rlbox_sandbox&lt; T_Sbx &gt;::INTERNAL_invoke_with_func_name</definition>
        <argsstring>(const char *func_name, T_Args &amp;&amp;... params)</argsstring>
        <name>INTERNAL_invoke_with_func_name</name>
        <param>
          <type>const char *</type>
          <declname>func_name</declname>
        </param>
        <param>
          <type>T_Args &amp;&amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="487" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="487" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1aa9949431e81241554f6b54fa7bcaca19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T_Args</declname>
            <defname>T_Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto rlbox::rlbox_sandbox&lt; T_Sbx &gt;::INTERNAL_invoke_with_func_ptr</definition>
        <argsstring>(void *func_ptr, T_Args &amp;&amp;... params)</argsstring>
        <name>INTERNAL_invoke_with_func_ptr</name>
        <param>
          <type>void *</type>
          <declname>func_ptr</declname>
        </param>
        <param>
          <type>T_Args &amp;&amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="500" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="500" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1acd10ff63b848c01690ba1f8977621a72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T2, T_Sbx &gt;</type>
        <definition>tainted&lt;T2, T_Sbx&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::UNSAFE_accept_pointer</definition>
        <argsstring>(T2 ptr)</argsstring>
        <name>UNSAFE_accept_pointer</name>
        <param>
          <type>T2</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="543" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="543" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1ad2cf7d6b28eca1cdc04cb3cbee338189" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Ret</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1sandbox__callback" kindref="compound">sandbox_callback</ref>&lt; T_Cb_no_wrap&lt; T_Ret &gt; *, T_Sbx &gt;</type>
        <definition>sandbox_callback&lt;T_Cb_no_wrap&lt;T_Ret&gt;*, T_Sbx&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::register_callback</definition>
        <argsstring>(T_Ret(*)())</argsstring>
        <name>register_callback</name>
        <param>
          <type>T_Ret(*)()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="557" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="557" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1ae4f4cc7825bcb613ab5405e0f6cae7f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_RL</type>
          </param>
          <param>
            <type>typename T_Ret</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T_Args</declname>
            <defname>T_Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1sandbox__callback" kindref="compound">sandbox_callback</ref>&lt; T_Cb_no_wrap&lt; T_Ret, T_Args... &gt; *, T_Sbx &gt;</type>
        <definition>sandbox_callback&lt;T_Cb_no_wrap&lt;T_Ret, T_Args...&gt;*, T_Sbx&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::register_callback</definition>
        <argsstring>(T_Ret(*func_ptr)(T_RL, T_Args...))</argsstring>
        <name>register_callback</name>
        <param>
          <type>T_Ret(*)(T_RL, T_Args...)</type>
          <declname>func_ptr</declname>
        </param>
        <briefdescription>
<para>Expose a callback function to the sandboxed code. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback to expose.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_RL</parametername>
</parameternamelist>
<parameterdescription>
<para>Sandbox reference type (first argument). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_Ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Return type of callback. Must be tainted or void. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Types of remaining callback arguments. Must be tainted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Wrapped callback function pointer that can be passed to the sandbox. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="584" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="584" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1ad65b42ed5e903655cc23cc9e33672b16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T *, T_Sbx &gt;</type>
        <definition>tainted&lt;T*, T_Sbx&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::INTERNAL_get_sandbox_function_name</definition>
        <argsstring>(const char *func_name)</argsstring>
        <name>INTERNAL_get_sandbox_function_name</name>
        <param>
          <type>const char *</type>
          <declname>func_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="691" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="691" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a912906aabd93bf8358153b7a4c7e0adc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T *, T_Sbx &gt;</type>
        <definition>tainted&lt;T*, T_Sbx&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::INTERNAL_get_sandbox_function_ptr</definition>
        <argsstring>(void *func_ptr)</argsstring>
        <name>INTERNAL_get_sandbox_function_ptr</name>
        <param>
          <type>void *</type>
          <declname>func_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="699" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="699" bodyend="702"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a030d5e296cdeb24cd4ca99a5cbe0ea39" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_unsandboxed_pointer_no_ctx</definition>
        <argsstring>(convert_to_sandbox_equivalent_nonclass_t&lt; T &gt; p, const void *example_unsandboxed_ptr)</argsstring>
        <name>get_unsandboxed_pointer_no_ctx</name>
        <param>
          <type>convert_to_sandbox_equivalent_nonclass_t&lt; T &gt;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>example_unsandboxed_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="340" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="340" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a37e1e1468b883faf8a878b3c0a221d39" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>convert_to_sandbox_equivalent_nonclass_t&lt; T &gt;</type>
        <definition>static convert_to_sandbox_equivalent_nonclass_t&lt;T&gt; rlbox::rlbox_sandbox&lt; T_Sbx &gt;::get_sandboxed_pointer_no_ctx</definition>
        <argsstring>(const void *p, const void *example_unsandboxed_ptr)</argsstring>
        <name>get_sandboxed_pointer_no_ctx</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>example_unsandboxed_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="355" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="355" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1rlbox__sandbox_1a3257ffc0e7eb6022c05a049b8b36271f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool rlbox::rlbox_sandbox&lt; T_Sbx &gt;::is_in_same_sandbox</definition>
        <argsstring>(const void *p1, const void *p2)</argsstring>
        <name>is_in_same_sandbox</name>
        <param>
          <type>const void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Check if two pointers are in the same sandbox. For the null-sandbox, this always returns true. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="438" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="438" bodyend="441"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Encapsulation for sandboxes. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_Sbx</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of sandbox. For the null sandbox this is <computeroutput><ref refid="classrlbox_1_1rlbox__noop__sandbox" kindref="compound">rlbox_noop_sandbox</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="84">
        <label>T_Sbx</label>
      </node>
      <node id="83">
        <label>rlbox::rlbox_sandbox&lt; T_Sbx &gt;</label>
        <link refid="classrlbox_1_1rlbox__sandbox"/>
        <childnode refid="84" relation="protected-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="86">
        <label>T_Sbx</label>
      </node>
      <node id="85">
        <label>rlbox::rlbox_sandbox&lt; T_Sbx &gt;</label>
        <link refid="classrlbox_1_1rlbox__sandbox"/>
        <childnode refid="86" relation="protected-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" line="43" column="1" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_sandbox.hpp" bodystart="42" bodyend="703"/>
    <listofallmembers>
      <member refid="classrlbox_1_1rlbox__sandbox_1ae65aee474d232b3737e07638df545f3d" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>callback_keys</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a08803ef5d6b029a8b31c34df70322f51" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>callback_lock</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a29b5ec5468651f2ac34eb5107163b93b" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>check_invoke_param_type_is_ok</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a24201ea4d4fa6923d41cc3916466095e" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>convert_fn_ptr_to_sandbox_equivalent_t</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a2236c8f780e2fbb505b616a05d632298" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>convert_to_sandbox_equivalent_nonclass_t</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a7b938866462f607bcc069770c1bc1ba6" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>create_sandbox</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ac2be161ed2183fa8bc319232a8d74da6" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>destroy_sandbox</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a0695cfcf47345344e02d1d4ba058337d" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>find_sandbox_from_example</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a775b1828f996dc8f14f24a296096e0e3" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>free_in_sandbox</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1af1bfe0450085d81244ecffc3e2556038" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>func_ptr_cache_lock</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a2518efbb4e7c12d050fa555f121ee165" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>func_ptr_map</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1af682f225ef74ad07cfa5c25e7c8ed42c" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_memory_location</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a32de91755a582024dc43b879ef192b2c" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_sandbox_impl</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1aaef51e55536f08aa4c642f21d0de8008" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_sandboxed_pointer</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a37e1e1468b883faf8a878b3c0a221d39" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_sandboxed_pointer_no_ctx</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a9bfda00c80c73e70ddbc3f2419066cb8" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_total_memory</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a4776bcab38dc24395657d2c437e36fc8" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_unsandboxed_pointer</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a030d5e296cdeb24cd4ca99a5cbe0ea39" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>get_unsandboxed_pointer_no_ctx</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ad65b42ed5e903655cc23cc9e33672b16" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>INTERNAL_get_sandbox_function_name</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a912906aabd93bf8358153b7a4c7e0adc" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>INTERNAL_get_sandbox_function_ptr</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a9f9e13680f09205f25a520fc04ef3f9a" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>INTERNAL_invoke_with_func_name</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1aa9949431e81241554f6b54fa7bcaca19" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>INTERNAL_invoke_with_func_ptr</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a9d7fe6306db467d3949862346084aeed" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>invoke_process_param</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a3257ffc0e7eb6022c05a049b8b36271f" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>is_in_same_sandbox</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1afc6c3f229b2807517c54cc120dfda941" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>is_pointer_in_app_memory</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a55e48f0300c16d36ea7ed5a7e4750f64" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>is_pointer_in_sandbox_memory</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a38b2f18b1db0dbd789477a93d0dc40eb" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>lookup_symbol</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ab6ecbc8d0d69a3305912fe92882ef6b9" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>malloc_in_sandbox</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a967ee4efa3c49a4493eaeda65b338e70" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>malloc_in_sandbox</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ad2cf7d6b28eca1cdc04cb3cbee338189" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>register_callback</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ae4f4cc7825bcb613ab5405e0f6cae7f3" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>register_callback</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a4c4c49f996b6cc9040fb9e09a8cc4ae8" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>sandbox_callback_intercept_convert_param</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ac6a40ac359d24d397bdfa65c95e04351" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>sandbox_callback_interceptor</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ae9542cd3cc19b7655958aa4332adbe60" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>sandbox_created</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ab052abf0169e7efc9a6cb38a3b5b9cf1" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>sandbox_list</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1ab6fd863e3c6c8506a01745e7d992f916" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>sandbox_list_lock</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a815c2a8b5adaf0944fd995e7c9cfc72c" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>Sandbox_Status</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1a09c972acd976ab264478c3abd32f8383" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>T_Cb_no_wrap</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1abded0a7d6c2b1c5505be3d0c87817c96" prot="private" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>unregister_callback</name></member>
      <member refid="classrlbox_1_1rlbox__sandbox_1acd10ff63b848c01690ba1f8977621a72" prot="public" virt="non-virtual"><scope>rlbox::rlbox_sandbox</scope><name>UNSAFE_accept_pointer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
